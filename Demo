using Csharp.inhertance;

namespace Csharp
{
    #region inhertance
    //internal class parent
    //{
    //    public parent(int x, int y)
    //    {
    //        this.x = x;
    //        this.y = y;
    //    }

    //    public int x { get; set; }
    //    public int y { get; set; }

    //    public virtual void myfun()
    //    {
    //        Console.WriteLine("hello from parent");
    //    }
    //    public virtual int Product()
    //    {
    //        return x * y;
    //    }
    //    public override string ToString()
    //    {
    //        return $"{x}  {y}";
    //    }
    //}
    //internal class Child : parent
    //{
    //    //public Child(int x, int y, int z)
    //    //{
    //    //    this.x = x;
    //    //    this.y = y;
    //    //    this.z = z;
    //    //}

    //    //public int x { get; set; }
    //    //public int y { get; set; }
    //    //public int z { get; set; }

    //    //public int Product()
    //    //{
    //    //    return x * y * z;
    //    //}

    //    //public override string ToString()
    //    //{
    //    //    return $" {x}  {y} {z}";
    //    //}

    //    //by defualt child will make ctor chaning for paramterlss ctor for parent
    //    public int z { get; set; }
    //    public Child(int x, int y, int z) : base(x, y)
    //    {
    //        this.z = z;
    //    }
    //    public override string ToString()
    //    {
    //        return base.ToString() + $"  {z}";
    //    }

    //    public override int Product()
    //    {
    //        return base.Product() * z;
    //    }
    //    public new void myfun()
    //    {
    //        Console.WriteLine("hello from child");
    //    }

    //} 
    #endregion

    #region polymorphism
    //class typeA
    //{
    //    public int a { get; set; }

    //    public typeA(int a)
    //    {
    //        this.a = a;
    //    }
    //    public void fun1()
    //    {
    //        Console.WriteLine(" type A");
    //    }
    //    public virtual void fun2()
    //    {
    //        Console.WriteLine($"{a}");
    //    }
    //    public override string ToString()
    //    {
    //        return $"A={a}";
    //    }

    //}
    //class typeB : typeA
    //{
    //    public int b { get; set; }
    //    public typeB(int a, int b) : base(a)
    //    {
    //        this.b = b;
    //    }
    //    public override void fun2()
    //    {
    //        Console.WriteLine($" a= {a}  b= {b}");
    //    }
    //    public new void fun1() //my own virson start from this class[hiding ]
    //    {
    //        Console.WriteLine(" type b");
    //    }


    //    //to use keyword override must fun in base be virtual and non private
    //    // dynamic polymorphism /bind method call based on object type at run time

    //    //new bind method based on ref type /static binding at compile time
    //    // hide --masking

    //    public override string ToString()
    //    {
    //        return base.ToString() + $"  B={b}";
    //    }


    #endregion

    #region binding
    //class typeA
    //{
    //    public int A { get; set; }
    //    public void fun1()
    //    {
    //        Console.WriteLine("fun1 from typeA");
    //    }
    //    public virtual void fun2()
    //    {
    //        Console.WriteLine($"A={ A}");
    //    }
    //}
    //class typeB:typeA
    //{
    //    public int B { get; set; }
    //    public new void fun1()
    //    {
    //        Console.WriteLine("fun1 from typeB");
    //    }
    //    public override void fun2()
    //    {
    //        Console.WriteLine($"A={A}  B={B}");
    //    }
    //}
    //class typec : typeB
    //{
    //    public int c { get; set; }
    //    public new void fun1()
    //    {
    //        Console.WriteLine("fun1 from typec");
    //    }
    //    public override void fun2()
    //    {
    //        Console.WriteLine($"A={A}  B={B}  c={c}");
    //    }
    //}
    //    class typeD : typec
    //    {
    //        public int d { get; set; }
    //        public void fun1()
    //        {
    //            Console.WriteLine("fun1 from typed");
    //        }
    //          public new virtual void fun2()
    //        {
    //            Console.WriteLine($"A={A}  B={B}  c={c}  d={d}");
    //        }
    //    }
    //class typeE : typeD
    //{
    //    public int e { get; set; }
    //    public void fun1()
    //    {
    //        Console.WriteLine("fun1 from typee");
    //    }
    //    public override void fun2()
    //    {
    //        Console.WriteLine($"A={A}  B={B}  c={c}  d={d}  e={e}");
    //    }
    //} 
    #endregion
    internal class Program
    {
        #region Method overloading

        //public static int sum2(int x,int y)
        //{
        //    return x + y;   
        //}
        ////public static long sum2(int x, int y)//invalid return type cant be method overloading
        ////{
        ////    return x + y;
        ////}
        //public static int sum3(int x, int y,int z)
        //{
        //    return x + y+z;
        //}
        //public static double sum2(double x,double y)//method overloading
        //{
        //    return x + y;
        //}

        public static int sum(int x, int y)
        {
            return x + y;
        }
        public static double sum(int x, double y)
        {
            return x + y;
        }
        public static double sum(double x, double y)
        {
            return x + y;
        }
        public static int sum(int x, int y,int z)
        {
            return x + y + z;
        }
        #endregion


        static void Main(string[] args)
        {
            #region inhertance
            ////parent p;//just create ref 
            ////p = new parent(10,20);
            ////Console.WriteLine(p.ToString());


            ////Console.WriteLine(p.Product());
            ////p.myfun();  


            ////Child p2=new Child(10,20,30);
            ////Console.WriteLine(p2.ToString());
            ////Console.WriteLine(p2.Product()); 
            #endregion
            #region method overloading

            //int x = 10; int y = 20, z = 30;
            ////Console.WriteLine(sum2(x,y));
            ////Console.WriteLine(sum3(x, y,z));
            ////double a = 1.5, b = 2.7;
            ////Console.WriteLine(sum2(a, b));
            //Console.WriteLine(sum(10.4,2)); 
            #endregion

            #region ploymorphism
            //typeA t = new typeA(3);
            //t.fun1();
            //t.fun2();

            //typeB t2 = new typeB(3,3);
            //Console.WriteLine(t2);
            //t2.fun1();
            //t2.fun2(); 
            #endregion

            #region binding
            //typeA t = new typeB(2, 3);
            //t.a = 1;
            //// t.b = 2;//invalid parent cant see child details 
            //t.fun1();
            //t.fun2();

            //typeA t=new typeA();    
            ////t= new typeB();
            ////t = new typec();
            //t = new typeD();

            //t.A = 1;
            //// t.B = 2;
            //t.fun1(); 
            //t.fun2();   //  [virtual] look for last override for this function
            //            //new break override

            //t=new typeE();
            //t.fun2();// call fun2 in c 
            #endregion
        }
    }
}
